/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * StarRating.java
 *
 * Created on 25 Μαϊ 2010, 10:07:25 πμ
 */
package com.googlecode.starrating;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;

/**
 * StarRating Class
 * StarRating is a JPanel that holds 10 images of half stars (5 stars in total)
 * The rate ranges from 0.5 to 5.0
 * When a star is clicked a property change event is fired. The properties name is
 * {@link #RATE_CHANGED}.
 * @author ssoldatos
 */
public class StarRating extends javax.swing.JPanel {

  private double rate;
  private int maxRate;
  private ArrayList<Star> stars;
  private ValueLabel valueLabel;
  private RemoveButton removeButton;
  private boolean valueLabelShown = false;
  private boolean removeButtonShown = false;
  public static String RATE_CHANGED = "RATE_CHANGED";

  /**
   * Creates a default StarRating with a rate of 0
   */
  public StarRating() {
    this(0.0, 5);
  }

  public StarRating(double rate) {
    this(rate, 5);
  }

  public StarRating(int maxRate) {
    this(0.0, maxRate);
  }

  /** Creates a StarRating with the initial rate of rate
   * @param rate The initial rate
   * @param maxRate 
   */
  public StarRating(double rate, int maxRate) {
    super();
    this.maxRate = maxRate;
    initComponents();
    stars = new ArrayList<Star>();
    valueLabel = new ValueLabel(rate);
    removeButton = new RemoveButton();
    setOpaque(false);
    for (int i = 0; i < getMaxRate() * 2; i++) {
      boolean enabled;
      enabled = i <= rate * 2 ? true : false;
      stars.add(i, new Star(i, enabled));
      add(stars.get(i));
      stars.get(i).addStarMouseAdapter();
    }
    setRate(rate);
    showRemoveButton();
    setPreferredSize(new Dimension(maxRate * 20 + 40, 20));
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    setBackground(new java.awt.Color(255, 51, 51));
    setMaximumSize(new java.awt.Dimension(10000, 20));
    setMinimumSize(new java.awt.Dimension(150, 20));
    setName("StarRating"); // NOI18N
    setOpaque(false);
    setPreferredSize(new java.awt.Dimension(300, 20));
    addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseEntered(java.awt.event.MouseEvent evt) {
        formMouseEntered(evt);
      }
      public void mouseExited(java.awt.event.MouseEvent evt) {
        formMouseExited(evt);
      }
    });
    setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));
  }// </editor-fold>//GEN-END:initComponents

  private void formMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseEntered
    if (isRatingEnabled()) {
      clearRate();
    }
  }//GEN-LAST:event_formMouseEntered

  private void formMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseExited
    if (isRatingEnabled()) {
      previewRate(getRate());
    }
  }//GEN-LAST:event_formMouseExited

  /**
   * Sets if StarRating is enabled
   * @param enabled
   */
  public void setRatingEnabled(boolean enabled) {
    setEnabled(enabled);
  }

  /**
   * Gets if StarRating is enabled
   * @return If StarRating is enabled
   */
  public boolean isRatingEnabled() {
    return isEnabled();
  }

  /**
   * Shows the value label should be shown next to the stars
   */
  private void showValueLabel() {
    if (!isValueLabelShown()) {
      add(getValueLabel(), getComponentCount());
      valueLabelShown = true;
      validate();
      repaint();
    }
  }

  /**
   * Hides the value label
   */
  private void hideValueLabel() {
    if (isValueLabelShown()) {
      remove(getValueLabel());
      valueLabelShown = false;
      validate();
      repaint();
    }
  }

  void clearRate() {
    for (int i = 0; i < stars.size(); i++) {
      Star star = stars.get(i);
      star.clearRate();
    }
  }

  void previewRate(double rate) {
    for (int i = 0; i < stars.size(); i++) {
      Star star = stars.get(i);
      if (i < rate * 2) {
        star.setRate();
      } else {
        star.clearRate();
      }
    }
    valueLabel.setValue(rate);
  }

  /**
   * Gets the rate
   * @return the rate
   */
  public double getRate() {
    return rate;
  }

  /**
   * Sets the rate
   * @param rate the rate to set
   */
  public void setRate(double rate) {
    double oldRate = this.rate;
    this.rate = rate;
    previewRate(rate);
    valueLabel.setValue(rate);
    firePropertyChange(RATE_CHANGED, oldRate, rate);
  }

  /**
   * Gets the value label
   * @return the valueLabel
   */
  public JLabel getValueLabel() {
    return valueLabel;
  }

  /**
   * Gets if value label is shown
   * @return the isValueLabelShown
   */
  public boolean isValueLabelShown() {
    return valueLabelShown;
  }

  /**
   * Gets the remove button
   * @return The remove button
   */
  public RemoveButton getRemoveButton() {
    return removeButton;
  }

  /**
   * Set if remove button is shown
   * @param remove If remove button is shown
   */
  public void setRemoveButtonShown(boolean remove) {
    if (remove) {
      showRemoveButton();
    } else {
      hideRemoveButton();
    }
    removeButtonShown = remove;
  }

  /**
   * Gets if remove button is shown
   * @return If remove button is shown
   */
  public boolean isRemoveButtonShown() {
    return removeButtonShown;
  }

  /**
   * Sets if the value label is shown
   * @param shown If the value label is shown
   */
  public void setValueLabelShown(boolean shown) {
    if (shown) {
      showValueLabel();
    } else {
      hideValueLabel();
    }
    valueLabelShown = shown;
  }

  private void hideRemoveButton() {
    remove(removeButton);
    removeButtonShown = false;
    validate();
  }

  private void showRemoveButton() {
    if (!isRemoveButtonShown()) {
      removeButton.setOpaque(false);
      add(removeButton, 0);
      removeButtonShown = true;
      validate();
      repaint();
    }
  }

  /**
   * @return the maxRate
   */
  public int getMaxRate() {
    return maxRate;
  }

  /**
   * @param maxRate the maxRate to set
   */
  public void setMaxRate(int maxRate) {
    if (maxRate > getMaxRate()) {
      for (int i = stars.size(); i < maxRate * 2; i++) {
        stars.add(i, new Star(i, false));
        add(stars.get(i), i + 1);
        stars.get(i).addStarMouseAdapter();
      }
    } else {
      for (int i = stars.size(); i > maxRate * 2; i--) {
        remove(stars.get(i-1));
        stars.remove(i-1);
      }
      if(getRate() > maxRate){
        setRate(maxRate);
      }
    }
    setPreferredSize(new Dimension(maxRate * 20 + 40, getHeight()));
    validate();
    repaint();
    this.maxRate = maxRate;
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables
}
